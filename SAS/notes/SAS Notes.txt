 1. Importing Data 
PROC IMPORT DATAFILE=CUsersSeanDcredit-risk-projectSASdatasample_data.csv 
    OUT=work.sample_data
    DBMS=CSV REPLACE;
    GETNAMES=YES;
RUN;

 2. Basic Data Exploration 
PROC CONTENTS DATA=work.sample_data; RUN;
PROC MEANS DATA=work.sample_data N MEAN MEDIAN MIN MAX; RUN;
PROC FREQ DATA=work.sample_data; TABLES credit_score delinquency_status; RUN;

 3. Data Cleaning 
DATA work.cleaned_data;
    SET work.sample_data;
     Handling missing values 
    IF missing(credit_score) THEN credit_score = 600;  Default score 
     Converting categorical variable 
    IF delinquency_status = 'Yes' THEN delinquent = 1;
    ELSE IF delinquency_status = 'No' THEN delinquent = 0;
RUN;

 4. Logistic Regression for Credit Scoring 
PROC LOGISTIC DATA=work.cleaned_data DESCENDING;
    CLASS employment_status (REF='Unemployed')  PARAM=REF;
    MODEL delinquent = credit_score income loan_amount;
    OUTPUT OUT=work.scoring_results PREDICTED=probability_of_default;
RUN;

 5. Creating a Risk Segmentation 
PROC RANK DATA=work.cleaned_data OUT=work.ranked_groups GROUPS=5;
    VAR credit_score;
    RANKS risk_group;
RUN;

 6. Reporting 
PROC REPORT DATA=work.ranked_groups NOWD;
    COLUMNS risk_group credit_score loan_amount;
    DEFINE risk_group  GROUP;
    DEFINE credit_score  ANALYSIS MEAN;
    DEFINE loan_amount  ANALYSIS SUM;
RUN;

 7. Macro for Automated Reporting 
%MACRO generate_report(dataset);
    PROC MEANS DATA=&dataset N MEAN MEDIAN MIN MAX;
    RUN;
%MEND generate_report;

%generate_report(work.cleaned_data);


## Lesson 1;

Majority of SAS statements are Data or Proc
Global Statements (Libname, title, options) do not need to be followed by run;

File Path for exercises: S:/workshop/EPG1V2/data

To comment out a single statement with a semi colon at the end you can use *
/* */ is used for a whole line

Highlight text and use ctrl / to comment a line


## Lesson 2 - Accessing Data;

Data is generally structured or unstructured

SAS tables, Access or Excel tables

Unstructured data - no defined columns - examples include text, delimited, JSON, weblogs

Must be imported into SAS

SAS tables have extension .sas7bdat

Descriptor portion of SAS table contains metadata

Column must have 3 attributes - name, type and length

1-32 characters
must start with letter or underscore
can be mixed case

Numeric - contains digits 0-9, minus sign, decimal point or scientific notation only.

SAS Dates - number of days between 01Jan1960.

Numeric columns are 8 bytes 
Character codes are 1-32767 bytes

Missing character values are represented as "" (empty space)

Missing numeric values are represented as . (full stop)

Proc contents step allows you to see the descriptor of a table

Create a SAS library:

LIBNAME libref engine "path";

Libref is 8 characters max, must start with letter or underscore and continues with letters, numbers or underscores

Engine is set of instructions - base for SAS tables 

"path" is location. 

Example statement:

LIBNAME mylib base "s:/workshop/data";

Libname statements remain active until it is deleted or the sas session is ended.

Work library is temporary library - contents deleted at the end of the session.

SASHELP is also defined - includes sample data

When importing Excel data you can specify options validvarname=v7; This forces non-SAS compatible column names into appropriate formats


PROC IMPORT DATAFILE="path/filename" DBMS=filetype
OUT=output-table;
RUN;

PROC IMPORT reads data from a non-sas table. DBMS = defines the delimiter type.

## Lesson 3: Exploring and Validating Data

Proc Contents allows you to explore the data

Proc print - creates list of all rows and columns

Proc means - simple summary stats, can see missing values

Proc univariate - more detailed stats of distribution

Proc freq - frequency distribution


When using conditional where statement - dates must be written like

"ddmmmyyyy"d 

Missing numeric values are treated as 0 in conditional where statements

is missing + is not missing are two key words you can use to filter out missing values

between and like can also be used - % is a wildcard for any number of characters and _ is a single character


Macro Variables allows you to declare global macro

%let macro-variable = value;

Example:

%let carType = Wagon;

proc print data=sashelp.cars;
where type = "&carType";
run;

Macro variables are temporary

You can apply formats to SAS tables using:

Proc print data=input-table;
format col-names format;
run;

Does not change raw data values.

PROC Sort can be used to sort data - out= is needed
	by <descending> col-name;
run;

Proc sort doesn't output results - have to print the resulting tables

NODUPKEY keeps only the first instance of value occurring.

BY _ALL_; - removes all duplicates

dupout = view the duplicated rows removed by the nodupkey 


Summary of Lesson 3: Exploring and Validating Data
Exploring Data
PROC PRINT lists all columns and rows in the input table by default. The OBS= data set option limits the number of rows listed. The VAR statement limits and orders the columns listed.

PROC PRINT DATA=input-table(OBS=n);
        VAR col-name(s);
RUN;

PROC MEANS generates simple summary statistics for each numeric column in the input data by default. The VAR statement limits the variables to analyze.

PROC MEANS DATA=input-table;
        VAR col-name(s);
RUN;

PROC UNIVARIATE also generates summary statistics for each numeric column in the data by default, but includes more detailed statistics related to distribution and extreme values. The VAR statement limits the variables to analyze.

PROC UNIVARIATE DATA=input-table;
        VAR col-name(s);
RUN;

PROC FREQ creates a frequency table for each variable in the input table by default. You can limit the variables analyzed by using the TABLES statement.

PROC FREQ DATA=input-table;
        TABLES col-name(s) < / options>;
RUN;

Filtering Rows
The WHERE statement is used to filter rows. If the expression is true, rows are read. If the expression is false, they are not.

Character values are case sensitive and must be in quotation marks.

Numeric values are not in quotation marks and must only include digits, decimal points, and negative signs.

Compound conditions can be created with AND or OR.

The logic of an operator can be reversed with the NOT keyword.

When an expression includes a fixed date value, use the SAS date constant syntax: “ddmmmyyyy”d, where dd represents a 1- or 2-digit day, mmm represents a 3-letter month in any case, and yyyy represents a 2- or 4-digit year.

PROC procedure-name ... ;
        WHERE expression;
RUN;

WHERE Operators
= or EQ
^= or ~= or NE
> or GT
< or LT
>= or GE
<= or LE


SAS Date Constant
"ddMONyyyy"d


IN Operator
WHERE col-name IN(value-1<...,value-n>);
WHERE col-name NOT IN (value-1<…,value-n>);


Special WHERE Operators
WHERE col-name IS MISSING;
WHERE col-name IS NOT MISSING;
WHERE col-name IS NULL;
WHERE col-name BETWEEN value-1 AND value-2;
WHERE col-name LIKE "value";
WHERE col-name =* "value";


Filtering Rows with Macro Variables
%LET macro-variable=value;


Example WHERE Statements with Macro Variables:
WHERE numvar=&macrovar;
WHERE charvar="&macrovar";
WHERE datevar="&macrovar"d

A macro variable stores a text string that can be substituted into a SAS program.

The %LET statement defines the macro variable name and assigns a value.

Macro variable names must follow SAS naming rules.

Macro variables can be referenced in a program by preceding the macro variable name with an &.

If a macro variable reference is used inside quotation marks, double quotation marks must be used.
Formatting Columns
Formats are used to change the way values are displayed in data and reports.

Formats do not change the underlying data values.

Formats can be applied in a procedure using the FORMAT statement.

Visit SAS Language Elements documentation to access a list of available SAS formats.

PROC PRINT DATA=input-table;
        FORMAT col-name(s) format;
RUN;

<$>format-name<w>.<d>
Sorting Data and Removing Duplicates
PROC SORT sorts the rows in a table on one or more character or numeric columns.

The OUT= option specifies an output table. Without this option, PROC SORT changes the order of rows in the input table.

The BY statement specifies one or more columns in the input table whose values are used to sort the rows. By default, SAS sorts in ascending order.

PROC SORT DATA=input-table <OUT=output-table>;
        BY <DESCENDING> col-name(s);
RUN;


The NODUPKEY option keeps only the first row for each unique value of the column(s) listed in the BY statement.

The NODUPKEY option together with the BY _ALL_ statement removes adjacent rows that are entirely duplicated.

The DUPOUT= option creates an output table containing duplicates removed.

PROC SORT DATA=input-table <OUT=output-table>
                      NODUPKEY <DUPOUT=output-table>;
        BY _ALL_;
RUN;

PROC SORT DATA=input-table <OUT=output-table>
                      NODUPKEY <DUPOUT=output-table>;
        BY col-name(s);
RUN;



#### Lesson 4 Preparing Data:

Data output-table;
set input-table;
run;

Execution of Data Step:
Read a row from input table
Sequentially process statements
At run, write the row to the output table
Loop back to the top and read the next row from the input table.


Any data source that can be read via a library can be used as the input table in the SET statement

Comma-delimited files cannot be used in the SET statement

Keep statement can go after where statement

keep name age height; works fine

Format step permanently assign a format to a column in a data step - new format is saved in the output table.

New column = expression

Note: you can use the shorthand notation OF col1 - coln to list a range of columns when the columns have the same name and end in a consecutive number.



Pre define a length type before you run the data step

length cartype $ 6;


using if then/do is the only way you are able to write multiple executable conditions after an if statement.


Lesson 4 notes:

Summary of Lesson 4: Preparing Data
Reading and Filtering Data
Creating a copy of data:

DATA output-table;
        SET input-table;
RUN;

Filtering rows in the DATA step:

DATA output-table;
        SET input-table;
        WHERE expression;
RUN;

Specifying columns to include in the output data set:

DROP col-name <col-name>;

KEEP col-name <col-name>;

Formatting columns in the DATA step:

DATA output-table;
        SET input-table;
        FORMAT col-name format;
RUN;
Computing New Columns
Using expressions to create new columns:

DATA output-table;
        SET input-table;
        new-column = expression;
RUN;

The name of the column to be created or updated is listed on the left side of the equals sign.

Provide an expression on the right side of the equal sign.

SAS automatically defines the required attributes if the column is new – name, type, and length.

A new numeric column has a length of 8.

The length of a new character column is determined based on the length of the assigned string.

Character strings must be quoted and are case sensitive.

Creating character columns:

LENGTH char-column $ length;

Using functions in expressions:

function(argument1, argument 2, ...);

DATA output-table;
        SET input-table;
        new-column=function(arguments);
RUN;

Functions for calculating summary statistics (ignore missing values):

SUM(num1, num2, ...)	calculates the sum
MEAN(num1, num2, ...)	calculates the mean
MEDIAN(num1, num2, ...)	calculates the median
RANGE(num1, num2, ...)	calculates the range
MIN(num1, num2, ...)	calculates the minimum
MAX(num1, num2, ...)	calculates the maximum
N(num1, num2, ...)	calculates the nonmissing
NMISS(num1, num2, ...)	calculates the missing

Character functions:

UPCASE(char1)
LOWCASE(char1)
changes letters in a character string to uppercase or lowercase
PROPCASE(char1)	changes the first letter of each word to uppercase and other letters to lowercase
CATS(char1, char2, ...)	concatenates character strings and removes leading and trailing blanks from each argument
SUBSTR(char, position, <length>)	returns a substring from a character string

Date functions that extract information from SAS date values:

MONTH(sas-date-value)	returns a number from 1 through 12 that represents the month
YEAR(sas-date-value)	returns the four-digit year
DAY(sas-date-value)	returns a number from 1 through 31 that represents the day of the month
WEEKDAY(sas-date-value)	returns a number from 1 through 7 that represents the day of the week (Sunday=1)
QTR(sas-date-value)	returns a number from 1 through 4 that represents the quarter

Date functions that create SAS date values:

TODAY()	returns the current date as a numeric SAS date value
MDY(month, day, year)	returns SAS date value from month, day, and year values
YRDIF(startdate, enddate, ‘AGE’)	calculates a precise age between two dates. There are various values for the third argument. However, "AGE" should be used for accuracy.
Conditional Processing
Conditional processing with IF-THEN logic:

IF expression THEN statement;

Conditional processing with IF-THEN-ELSE:

IF expression THEN statement;
<ELSE IF expression THEN statement;>
<ELSE IF expression THEN statement;>
ELSE statement;

Processing multiple statements with IF-THEN-DO:

IF expression THEN DO;
   <executable statements>
END;
<ELSE IF expression THEN DO;
   <executable statements>
END;>
ELSE DO;
   <executable statements>
END;

After the IF-THEN-DO statement, list any number of executable statements.

Close each DO block with an END statement.

#### Lesson 5: Analysing and reporting on Data



Using Titles and Footnotes: Title is a global statement


You can use the label statement to add descriptions to columns.

If you use a label statement in a data step it will permanently assign a label column in the output dataset.




